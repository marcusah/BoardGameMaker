#:import LayoutPlaceHolder layout.LayoutPlaceHolder
#:import LayoutEditor layout.LayoutEditor
#:import CARD conf.card_format
#:import FontIcon utils.fontello.FontIcon

<SelectableScreenshoot@ToggleButtonBehavior+Image>:
    size_hint:(None, None)
    size: (200,200)
    group: 'screenshot'
    pos_hint:{'center_x':.5}
    canvas.before:
        Color:
            rgb: (0,0,0) if self.state=='normal' else (.7,.7,.7)
        Rectangle:
            pos: self.pos
            size: self.size
    on_press: if args[0].last_touch.is_double_tap: self.lph.add_img_ph(self)

<Page@ScatterLayout>:
    id: page
    index: 0
    scale: .35
    do_rotation: False
    pos: 250,120
    size_hint: None, None
    canvas.before:
        Color:
            rgb: 1,1,1
        Rectangle:
            size: self.size
    size: cm(21), cm(29.7)

<LayoutEditor>
    size_hint: None, None
    size: 400,250
    GridLayout:
        cols:2
        row_force_default: True
        row_default_height: 30
        Label:
            text:"Width(cm):"
        TextInput:
            id: phw
            text: "%.2f"%(root.target.scale *root.target.width/cm(1))
            #on_text: root.update_selected_ph()
        Label:
            text:"Height(cm):"
        TextInput:
            id: phh
            text: "%.2f"%(root.target.scale *root.target.height/cm(1))
            #on_text: root.update_selected_ph()
        Label:
            text:"X(cm):"
        TextInput:
            id: phx
            text: "%.2f"%(root.target.scale *root.target.x/cm(1))
            #on_text: root.update_selected_ph()
        Label:
            text:"Y(cm):"
        TextInput:
            id: phy
            text: "%.2f"%(root.target.scale *root.target.y/cm(1))
            #on_text: root.update_selected_ph()
        Label:
            text:"Rotation(Â°):"
        TextInput:
            id: phr
            text: "%d"%(root.target.rotation)
            #on_text: root.update_selected_ph()
        Button:
            text: "Apply"
            on_press: root.dismiss(); root.layout_maker.update_selected_ph(phw.text, phh.text, phx.text, phy.text, phr.text)
        Button:
            text: "Cancel"
            on_press: root.dismiss()

<LayoutPlaceHolder>:
    bg_color: (0,0,1,.8) if self.selected else (0,0,1,.3)
    #:import CARD conf.card_format
    size: CARD.width, CARD.height

<BGLayoutMaker>:
    Accordion:
        size_hint_x: None
        width: 200
        orientation: 'vertical'
        AccordionItem:
            title: "PlaceHolder"
            collapse: False
            GridLayout:
                size_hint_x: .3
                row_default_height: 30
                cols: 1
                Button:
                    text: 'Add PlaceHolder'
                    on_press:  root.add_ph()
                Button:
                    text: 'Export'
                    on_press:  root.export_phs()
        AccordionItem:
            title: "Pages"
            GridLayout:
                size_hint_x: .3
                row_default_height: 30
                cols: 1
                Button:
                    text: 'Reset View'
                    on_press: p = view.children[0]; p.rotation=0 ; p.scale=.35; p.pos =  250,120
                Button:
                    text: 'Rotate View'
                    on_press: view.children[0].rotation-=90
                Button:
                    text: 'Add Page'
                    on_press:  root.add_page()
                Button:
                    text: 'Remove Page'
                    on_press:  root.remove_page()
                Button:
                    text: 'Add Mirror Page'
                    on_press:  root.add_mirror_page()
                Button:
                    text: 'Clear Current Page'
                    on_press:  root.clear_page()
                Spinner:
                    text: 'A4'
                    values: ['A4','Letter']
                BoxLayout:
                    Label:
                        text: "Width:"
                    TextInput:
                        id: page_width
                        #:import PAGE conf.page_format
                        text: "%.2d"%(PAGE.width/cm(1))
                    Label:
                        text: "cm"
                BoxLayout:
                    Label:
                        text: "Height:"
                    TextInput:
                        id: page_height
                        #:import PAGE conf.page_format
                        text: "%.2d"%(PAGE.height/cm(1))
                    Label:
                        text: "cm"

        AccordionItem:
            title: "Images"
            ScrollView:
                GridLayout:
                    size_hint_y: None
                    on_minimum_height: self.height = self.minimum_height
                    cols: 1
                    id: pictures
                    spacing: 10

    Label:
        text: 'Size on Display: %.2f cm x %.2f cm'%(21.0*page.scale, 29.7*page.scale)
        size: root.width-400,30
        x: 200
        y: 5
        size_hint: None, None
        halign: 'center'
        text_size: self.size
    Spinner:
        id: page_index
        pos: 200, 30
        size: root.width-400, 30
        size_hint: None, None
        text: "Page 1"
        values: ['Page %d'%(i+1) for i in range(len(root.pages))]
        on_text: root.set_page(args[1])
    StencilView:
        size_hint: None, None
        width: root.width-200
        id: view
        x: 200
        y: 60
        height: root.height - 100
        Page:
            id: page
    BoxLayout:
        orientation: 'vertical'
        width: 200
        size_hint_x: None
        pos_hint: {'right':1}
        disabled: True if root.selected_ph is None else False
        canvas.before:
            Color:
                rgb: .7,.7,.7
            Rectangle:
                size: self.size
                pos: self.pos
        Label:
            canvas.before:
                Color:
                    rgb: .3,.3,.3
                Rectangle:
                    size: self.size
                    pos: self.pos
            text: "Current PH: #" + (str(root.selected_ph.index) if root.selected_ph else '-')
            size_hint_y: None
            height: 30
        BoxLayout:
            size_hint_y: None
            height: 50
            canvas.before:
                Color:
                    rgb: 0,0,1
                Rectangle:
                    size: self.size
                    pos: self.pos
            Button:
                on_press: root.rotate_ph()
                FontIcon:
                    icon: 'ccw'
                    pos: self.parent.pos
                    size: self.parent.size
            Button:
                on_press: root.rotate_ph(-90)
                FontIcon:
                    icon: 'cw'
                    pos: self.parent.pos
                    size: self.parent.size
            Button:
                on_press: root.duplicate_ph()
                FontIcon:
                    icon: 'duplicate'
                    pos: self.parent.pos
                    size: self.parent.size
            Button:
                on_press:  root.remove_ph()
                FontIcon:
                    icon: 'cancel'
                    pos: self.parent.pos
                    size: self.parent.size

        GridLayout:
            cols: 2
            row_default_height: 30
            row_force_default: True
            Label:
                text: "Width:"
                size_hint_y: None
                height: 30
            TextInput:
                id: ph_w
                text: "%.2f cm"%(root.selected_ph.scale *root.selected_ph.width/cm(1)) if root.selected_ph else ""
            Label:
                text: "Height:"
                size_hint_y: None
                height: 30
            TextInput:
                id: ph_h
                text: "%.2f cm"%(root.selected_ph.scale*root.selected_ph.height/cm(1)) if root.selected_ph else ""
            Label:
                text: "X:"
                size_hint_y: None
                height: 30
            TextInput:
                id: ph_x
                text: "%.2fcm"%(root.selected_ph.x/cm(1)) if root.selected_ph else ""
            Label:
                text: "Y:"
                size_hint_y: None
                height: 30
            TextInput:
                id: ph_y
                text: "%.2fcm"%(root.selected_ph.y/cm(1)) if root.selected_ph else ""
            Label:
                text: "Angle:"
                size_hint_y: None
                height: 30
            TextInput:
                id: ph_angle
                text: '%s'%root.selected_ph.angle if root.selected_ph else ""

             #\n\nX: / Right: %.2fcm \nY:  / Top: %.2fcm\n", , , root.selected_ph.right/cm(1) ,, root.selected_ph.top/cm(1)) if root.selected_ph else ""

        Label:
            text: "#%d\n\n%.2f cm x %.2f cm\n\nX: %.2fcm / Right: %.2fcm \nY: %.2fcm / Top: %.2fcm\n"%(root.selected_ph.index,root.selected_ph.scale *root.selected_ph.width/cm(1), root.selected_ph.scale*root.selected_ph.height/cm(1), root.selected_ph.x/cm(1), root.selected_ph.right/cm(1) ,root.selected_ph.y/cm(1), root.selected_ph.top/cm(1)) if root.selected_ph else ""
            multiline: True
            size: 200,300
            size_hint: None, None
            text_size: self.size
            halign: 'center'
            valign: 'middle'
