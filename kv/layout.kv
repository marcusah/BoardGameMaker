#:import LayoutPlaceHolder layout.LayoutPlaceHolder
#:import LayoutEditor layout.LayoutEditor
#:import CARD conf.card_format


<LayoutEditor>
    size_hint: None, None
    size: 400,250
    GridLayout:
#        size_hint: None, None
#        size: 200, 300
#        pos: 0, 200
        cols:2
        row_force_default: True
        row_default_height: 30
        Label:
            text:"Width(cm):"
        TextInput:
            id: phw
            text: "%.2f"%(root.target.scale *root.target.width/cm(1))
            #on_text: root.update_selected_ph()
        Label:
            text:"Height(cm):"
        TextInput:
            id: phh
            text: "%.2f"%(root.target.scale *root.target.height/cm(1))
            #on_text: root.update_selected_ph()
        Label:
            text:"X(cm):"
        TextInput:
            id: phx
            text: "%.2f"%(root.target.scale *root.target.x/cm(1))
            #on_text: root.update_selected_ph()
        Label:
            text:"Y(cm):"
        TextInput:
            id: phy
            text: "%.2f"%(root.target.scale *root.target.y/cm(1))
            #on_text: root.update_selected_ph()
        Label:
            text:"Rotation(Â°):"
        TextInput:
            id: phr
            text: "%d"%(root.target.rotation)
            #on_text: root.update_selected_ph()
        Button:
            text: "Apply"
            on_press: root.dismiss(); root.layout_maker.update_selected_ph(phw.text, phh.text, phx.text, phy.text, phr.text)
        Button:
            text: "Cancel"
            on_press: root.dismiss()



<LayoutPlaceHolder>:
    do_rotation: True
    size_hint: None, None
    canvas.before:
        Color:
            rgba: (0,0,1,.8) if self.selected else (0,0,1,.3)
        #Rectangle:
        #    size: self.size[0]*self.scale, self.size[1]*self.scale
        #    pos: self.pos
#        Line:
#            rectangle: self.x-1, self.y-1, (self.size[0]+2), (self.size[1]+2)
#            width: 3
#        Line:
#            points: 0, self.y, self.x, self.y
#            width:3
#        Line:
#            points: self.x, 0, self.x, self.y
#            width: 3
#        Line:
#            points: self.right, self.top, self.dad.right, self.top
#            width: 3
#        Line:
#            points: self.right, self.top, self.right, self.dad.top
#            width: 3

#    canvas.before:
#        Color:
#            rgba: (1,0,0,.3)
        Rectangle:
            size: self.size
    Label:
        id: details
        text: "#%d\n\n%.2f cm x %.2f cm\n\nX: %.2fcm \n Right: %.2fcm \nY: %.2fcm \n Top: %.2fcm\n"%(root.index,root.scale *root.width/cm(1), root.scale*root.height/cm(1), root.x/cm(1), root.right/cm(1) ,root.y/cm(1), root.top/cm(1))
        halign: "center"
        size_hint: None, None
        width: root.width
        font_size: 24
        y: 100



<BGLayoutMaker>:
    Button:
        size_hint: None, None
        size: 200,30
        text: 'Reset View'
        on_press: page.rotation=0 ; page.scale=1; page.pos = (100,100)
    Button:
        size_hint: None, None
        size: 200,30
        text: 'Add PlaceHolder'
        pos: 0,30
        on_press:  root.add_ph()
    Button:
        size_hint: None, None
        size: 200,30
        text: 'Rotate PH '
        pos: 0,60
        on_press:  root.rotate_ph()
    Button:
        size_hint: None, None
        size: 200,30
        text: 'Export'
        pos: 0,90
        on_press:  root.export_phs()
    Button:
        size_hint: None, None
        size: 200,30
        text: 'Edit PH'
        pos: 0,120
        on_press:  root.edit_ph()
    Label:
        text: 'Size on Display: %.2f cm x %.2f cm'%(21.0*page.scale, 29.7*page.scale)
        size: 400,30
        pos: 200, 0
        size_hint: None, None
    Label:
        text: "#%d\n\n%.2f cm x %.2f cm\n\nX: %.2fcm / Right: %.2fcm \nY: %.2fcm / Top: %.2fcm\n"%(root.selected_ph.index,root.selected_ph.scale *root.selected_ph.width/cm(1), root.selected_ph.scale*root.selected_ph.height/cm(1), root.selected_ph.x/cm(1), root.selected_ph.right/cm(1) ,root.selected_ph.y/cm(1), root.selected_ph.top/cm(1)) if root.selected_ph else ""
        multiline: True
        size: 200,300
        pos: 0, 300
        size_hint: None, None
    ScatterLayout:
        id: page
        index: 0
        scale: .35
        do_rotation: False
        pos: 250,120
        size_hint: None, None
        canvas.before:
            Color:
                rgb: 1,1,1
            Rectangle:
                size: self.size
        size: cm(21), cm(29.7)