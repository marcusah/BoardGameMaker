#:import VirtualScreenManagerGrid utils.virtual_screen.VirtualScreenManagerGrid
#:import join os.path.join
#:import FontIcon utils.fontello.FontIcon
#:import BGGDeck sgm.BGDeckMaker


<StartupPopup@Popup>
    size_hint: .9,.7
    title: "Welcome to BoardGame Maker"
    BoxLayout:
        orientation: 'vertical'
        ScrollView:
            Label:
                size_hint_y: None
                height: self.texture_size[1]
                text_size: self.width, None
                text: "\n\nIf this is your first startup, you'll need to setup a working directory, where your games & pictures will be saved. \nFuture template made with the tools will record their path relative to this folder.\n\nTo setup this gamepath, click on 'go to settings' button below. Then click on the GamePath Line and select a suitable folder. THEN RESTART BGM !\n\nThe tools is beta software. So report all request & bugs to the bithub site.\nHope you enjoy this tools"
        BoxLayout:
            size_hint_y: None
            height: 30
            canvas.before:
                Color:
                    rgba: .7,.7,.7,.7
                Rectangle:
                    size: self.size
                    pos: self.pos
            CheckBox:
                active: True
                size_hint_x: None
                width: 20
                #:import startup_tips conf.startup_tips
                on_active: startup_tips(args[1])
            Label:
                text: "Show this message at startup"
                size_hint_x: .4
            Button:
                text: "Go To Settings"
                on_press: root.dismiss(); app.set_screen('Settings')
                size_hint_x: .4
            Button:
                text: "Close"
                size_hint_x: .3
                on_press: root.dismiss()


<ImageButton@ButtonBehavior+BoxLayout>:
    source: None
    text: ""
#    Image:
#        source: root.source
#        size_hint_x: .2
    FontIcon:
        icon: root.source if root.source else 'settings'
        color: 1,1,1,1
        font_size: 30
        size_hint_x: .2
    Label:
        text: root.text
        size_hint_x: .8

<LabelButton@ButtonBehavior+Label>:

<WriteFilePopup@Popup>:
    cb: None
    default_name: 'export.csv'
    BoxLayout:
        orientation: 'vertical'
        FileChooserListView:
        #:import get_last_dir conf.get_last_dir
        #:import GAMEPATH conf.gamepath
            dirselect: True
            rootpath: GAMEPATH
            path: get_last_dir()
            #:import split os.path.split
            #:import join os.path.join
            #:import isfile os.path.isfile
            on_selection: target.text = self.selection[0] if isfile(self.selection[0]) else join(self.selection[0],split(target.text)[-1])
            id: fselect
        BoxLayout:
            size_hint_y: None
            height: 30
            Label:
                text: "Filename:"
                size_hint_x: None
                width: 100
            TextInput:
                id: target
                text: join(fselect.path,root.default_name)
                multiline: False
                on_text_validate: root.dismiss(); root.cb(self.text)
        BoxLayout:
            size_hint_y: None
            height: 30
            Button:
                text: 'Apply'
                on_press: root.dismiss(); root.cb(target.text)
            Button:
                text: "Cancel"
                on_press: root.dismiss()


#Main Widget
<RootWidget>:

    orientation: "vertical"
    BoxLayout:
        pos_hint: {'top':1}
        size_hint_y: None
        height: 40
        id: message_bar
        ImageButton:
            id: app_action
            size_hint_x: None
            width: 200
            on_press: content.activated = not(content.activated)
            #source: 'img/%s.png'%content.current_screen.name
            source: content.current_screen.name
            text: 'Board Game Maker: '
        Spinner:
            id: screen_spinner
            size_hint_x: None
            width: 100
            on_text: root.screen_name = self.text
            text: "Deck"
            values: 'Deck','Designer', 'Layout', 'Settings', 'Script', 'Console','Browser'
        LabelButton:
            id: message
            on_press: app.alert('')# dismiss message
    VirtualScreenManagerGrid:
        orientation: 'horizontal'
        spacing: 20
        use_keyboard_shortcut: True
        scancode: 32 #space
        modifiers: ['ctrl']
        id: content
        on_children: if len(self.children)==2 and not(self.children[0].manager.activated): screen_spinner.text =  self.children[0].wrapped.name

        BGDeckMaker:
            id: deck
            name: 'Deck'

    FloatLayout:
        size_hint_y: None
        height: 0
        id: realizer
