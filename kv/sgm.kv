#:kivy 1.0.4
#:import CARD conf.card_format
#:import GAMEPATH conf.gamepath
#:import split os.path.split
#:import StickyButton utils.stickybutton.StickyButton
#:import FontIcon utils.fontello.FontIcon
#:set LIGHTGREY (.7,.7,.7)

<Icon@ButtonBehavior+BoxLayout>:
    source: ""
    text: ""
    orientation: 'vertical'
    size_hint_y: None
    height: 80
    font_size: 40
    color: 1,1,1,1
    icon: ""
    FontIcon:
        icon: root.icon
        color: root.color if root.state == 'normal' else (.7,.7,.7,.7)
        font_size: root.font_size
        size_hint_y: .6
    Label:
        text: root.text
        size_hint_y: .4
        font_size: int(root.font_size /2)

<DynamicQuantity@BoxLayout>:
    size_hint_x: None
    init_qt: 1
    Label:
        text: "%s"%root.init_qt
        id: qt
        font_size: 36
        size_hint: None, None
        size: 58, 50
        on_text: root.parent.parent.qt = int(self.text); app.compute_stats(None)
    BoxLayout:
        size_hint_x: None
        width: 30
        orientation: 'vertical'
        StickyButton:
            text: "^"
            background_color: 1,1,1,.5
            #size_hint: None, None
            #size: 15,17
            on_press: qt.text = str(int(qt.text)+1)
        StickyButton:
            text: "v"
            background_color: 1,1,1,.5
            #size_hint: None, None
            #size: 15,17
            on_press: qt.text = str(max(int(qt.text)-1,0))

<HiddenRemoveButton@ButtonBehavior+FontIcon>:
    size_hint_x: None
    width: 15
    font_size: 40
    #color: 0,0,0,1

<RVImage@ToggleButtonBehavior+Image>:
    source: 'img/recto.png' if self.state =='normal' else 'img/verso.png'
    #size_hint: None, None
    #size: 100, 100
    size_hint_x: None

<EditOptionLayout@BoxLayout>:
    size_hint_x: None
    orientation: 'vertical'

<StackPart>:
    height: 150
    spacing: 20
    padding: 20
    size_hint_y: None
    qt: 1
    verso: 'normal'
    dual: self.verso!='normal'
    on_dual: self.verso = 'normal' if not self.dual else 'down'
    canvas.after:
        Color:
            rgba: (0.3,0.3,1,.8) if self.selected else (0,0,0,0)
        Line:
            rounded_rectangle: self.x, self.y, self.width, self.height, 25
            width: 3
    Label:
        font_size: 48
        text: "#%s."%root.row
        size_hint_x: None
        width: 50
    BoxLayout:
        orientation: 'vertical'
        Image:
            source: root.source
            size: root.height, root.height
            id: img
        Label:
            text: split(root.name)[-1] if len(split(root.name)[-1])<15 else split(root.name)[-1][:5]+'[...]'+root.name[-5:]
            size_hint_y: .1
            font_size: img.height/10
    BoxLayout:
        size_hint_x: None
        disabled: not(root.selected)
        orientation: 'vertical'
        canvas.after:
            Color:
                rgb: 0,0,0
            Line:
                rectangle: self.x, self.y, self.width, self.height

        DynamicQuantity:
            id: qt
            selected: root.selected
            init_qt: root.qt
            canvas.after:
                Color:
                    rgb: 0,0,0
                Line:
                    rectangle: self.x, self.y, self.width, self.height
        RVImage:
            id: dual
            state: root.verso
            on_state: root.verso = self.state ;  app.compute_stats(None)

<FileItemOption@BoxLayout>:
    size_hint_y:  .05
    #height: 30
    width: self.parent.width if self.parent else 100
    on_parent: self.pos = (self.parent.x, self.parent.y+20) if self.parent else (0,0)
    BoxLayout:
        size_hint_x: .2
        Label:
            text: "1"
            font_size: max(root.width/11, 9)
            size_hint_x: .6
            id: qt
            halign: 'right'
            valign: 'middle'
            text_size: self.size
        BoxLayout:
            size_hint_x: .4
            orientation: 'vertical'
            StickyButton:
                text: "^"
                background_color: 1,1,1,.5
                #size_hint: None, None
                #size: 15,17
                on_press: qt.text = str(int(qt.text)+1)
            StickyButton:
                text: "v"
                background_color: 1,1,1,.5
                #size_hint: None, None
                #size: 15,17
                on_press: qt.text = str(max(int(qt.text)-1,0))
    RVImage:
        id: dual
        size_hint: .4, 1
    Button:
        size_hint: .4 , 1
        on_press: root.parent.add_item(qt.text, dual.state)
        background_color: 0,0,0,0
        FontIcon:
            font_size:  int(float(root.width)/6)
            #color: 0,0,0,1
            icon: 'add'
            pos: self.parent.pos
            size: self.parent.size

<FileItemOptionKV@FileItemOption>:
    Button:
        id: edit_button
        size_hint: .4 , 1
        width: 0 #will only apply if it is a template otherwise size hint will prevail
        on_press: app.set_screen('Designer'); app.root.ids['designer'].load("@%s"%root.parent.name)
        background_color: 0,0,0,0
        FontIcon:
            font_size:  int(float(root.width)/6)
            #color: 0,0,0,1
            icon: 'edit-1'
            pos: self.parent.pos
            size: self.parent.size

<FileViewItem>:
    orientation: 'vertical'
    group: 'fileitem'
    size_hint: None, 1
    width: self.height
    spacing: 0
    canvas.before:
        Color:
            rgba: (0,0,1,1) if self.state == 'down' else (1,1,1,0)
        Line:
            rectangle: self.x-3, self.y-3, self.width+6, self.height+6
            width: 3
        Color:
            rgba: (0,0,1,.31) if self.state == 'down' else (1,1,1,0)

        Rectangle:
            size: (self.width+10, self.height+30)
            pos: self.x-5, self.y-20
    Image:
        id: img
        #allow_stretch: True
        source: root.source
        size_hint_y: .8 if not root.is_all_folder else None
        width: 0
    Label:
        size_hint: 1, .15
        font_size:  max(root.width/10, 10)
        text_size: self.size
        halign: "center"
        text:  split(root.name)[-1] if len(split(root.name)[-1])<15 else split(root.name)[-1][:5]+'[...]'+root.name[-5:]

<-SpecialViewItem>:
    orientation: 'vertical'
    group: 'fileitem'
    size_hint: None, 1
    width: self.height
    spacing: 0
    canvas.before:
        Color:
            rgba: (0,0,1,1) if self.state == 'down' else (1,1,1,0)
        Line:
            rectangle: self.x-3, self.y-3, self.width+6, self.height+6
            width: 3
        Color:
            rgba: (0,0,1,.31) if self.state == 'down' else (1,1,1,0)

        Rectangle:
            size: (self.width+10, self.height+30)
            pos: self.x-5, self.y-20
    FontIcon:
        icon: root.source
        size_hint_y: .8
        font_size: max(60, root.width/2)
        #color: 0,0,0,1
    Label:
        size_hint: 1, .15
        font_size:  max(root.width/10, 10)
        text_size: self.size
        halign: "center"
        text:  split(root.name)[-1] if len(split(root.name)[-1])<15 else split(root.name)[-1][:5]+'[...]'+root.name[-5:]


<PictureGrid@GridLayout>:
    rows: 1
    padding: 10
    spacing: 10
    size_hint: None, 1
    on_minimum_width: self.width = self.minimum_width

<SizeEditPopup@Popup>:
    name: ""
    title: "Edit Size for %s"%split(self.name)[-1]
    target: None
    cb: None
    size_hint: .5, None
    height: 150
    pos_hint: {'center_x': .5, 'center_y': .5}
    GridLayout:
        cols: 3
        Label:
            text: "Width:"
        TextInput:
            id: width
        Spinner:
            values: ['px','cm']
            id: w_metric
            text: "px"
            on_text: width.text = "%.2f"%((float(width.text) * cm(1)) if args[1]=='px' else (float(width.text)/cm(1)))
        Label:
            text: "Height:"
        TextInput:
            id: height
        Spinner:
            values: ['px','cm']
            id: h_metric
            on_text: height.text = "%.2f"%((float(height.text) * cm(1)) if args[1]=='px' else (float(height.text)/cm(1)))
            text: "px"
        Button:
            text: "Apply"
            on_press: root.cb(); root.dismiss()
        Button:
            text: "Reset"
            on_press: h_metric.text="px"; w_metric.text="px"; width.text=str(self.target.width); height.text = str(self.target.height)
        Button:
            text: "Cancel"
            on_press: root.dismiss()


<TemplateEditTree>:
    hide_root: True
    on_selected_node: if hasattr(self.selected_node,'template'): root.update_tmpl(self.selected_node.template)

<TemplateEditPopup>:
    name: ""
    title: 'Edition of %s - (%.2f cmx%.2f cm)'%(split(self.name)[-1], preview.children[0].width/cm(1) if preview.children else 0, preview.children[0].height/cm(1) if preview.children else 0)
    size_hintt: .8,.8
    GridLayout:
        cols:2
        ScrollView:
            size_hint_x: .33
            TemplateEditTree:
                id: options
                target: preview
        BoxLayout:
            size_hint_x: .67
            orientation: 'vertical'
            RelativeLayout:
                id: FL
                canvas.before:
                    Color:
                        rgb: LIGHTGREY
                    Line:
                        rectangle: 0,0, self.width, self.height
                        width: 3
                    Color:
                        rgb: .3,.3,.3
                    Rectangle:
                        size: self.size
                Scatter:
                    id: preview
                    do_rotation: False
                    #center_x: root.center_x
                    #pos_hint: {'center_x':.5, 'center_y':.5}
            BoxLayout:
                size_hint_y: None
                orientation: "horizontal"
                height: 30
                Button:
                    text: "Apply"
                    on_press: root.dismiss(); root.compute()
                Button:
                    text: "Cancel"
                    on_press: root.dismiss()
                ToggleButton:
                    on_state: root.display_fields(self.state)
                    text: 'Fields Showed' if self.state == 'down' else 'Fields Hidden'

<BGDeckMaker>:
    #The Left tab with files/templates & values
    file_chooser: file_chooser
    Splitter:
        size_hint: .4,1
        sizable_from: 'right'
        max_size: 0.6*root.width
        TabbedPanel:
            folded: False
            do_default_tab: False
            tab_pos: 'top_left'
            #size_hint_x: None
            #width: 240
            id: explorer
            FloatLayout:
                ScrollView:
                    id: tab1_content
                    #FileChooserListView:
                    FolderTreeView:
                        root_options: {'text': 'Game Library'}
                        size_hint_y: None
                        on_minimum_height: self.height = self.minimum_height
                        id: file_chooser
                        rootpath: GAMEPATH if GAMEPATH else ""
                        filters: ['.jpg','.jpeg', '.png','.gif', '.kv']
                        on_selected_node: root.load_folder(args[1].path if hasattr(args[1],'path') else "")
                GridLayout:
                    id: tab2_content
                    cols: 1
                    Accordion:
                        orientation: 'vertical'
                        min_size: 10
                        AccordionItem:
                            collapse: False
                            title: "File"
                            ScrollView:
                                GridLayout:
                                    size_hint_y: None
                                    on_minimum_height: self.height = self.minimum_height
                                    cols: 1
                                    spacing: 10
                                    Icon:
                                        icon: "new"
                                        text: 'New'
                                        on_press: root.empty_stack()
                                    Icon:
                                        icon: "acrobat"
                                        text: 'PDF'
                                        on_press: root.write_file_popup("Choose PDF Export file", root.prepare_print, 'mydeck.pdf')
                                    Icon:
                                        text: 'Export'
                                        icon: 'export'
                                        on_press: root.write_file_popup("Choose XL Export file", root.export_file, 'mydeck.xlsx')
                                    Icon:
                                        text: 'Empty Img Cache'
                                        icon: 'ccw'
                                        on_press: from kivy.cache import Cache; Cache.remove('kv.image'); Cache.remove('kv.texture')
                        AccordionItem:
                            title: "Fit Format"
                            GridLayout:
                                cols: 2
                                row_force_default: True
                                row_default_height: 30
                                Label:
                                    text: 'Current'
                                Label:
                                    text: "Fit Format"
                                Label:
                                    text: "Card Width:"
                                TextInput:
                                    id: cw
                                    text: str((CARD.width)) if unit.text == 'px' else "%.2f"%(CARD.width/cm(1))
                                    #on_text_validate: CARD.updateW(self.text, unit.text)
                                    on_focus: if not self.focus: CARD.updateW(self.text, unit.text)
                                    multiline: False
                                Label:
                                    text: "Card Height:"
                                TextInput:
                                    id: ch
                                    text: str((CARD.height)) if unit.text == 'px' else "%.2f"%(CARD.height/cm(1))
                                    #on_text_validate: CARD.updateH(self.text, unit.text)
                                    on_focus: if not self.focus: CARD.updateH(self.text, unit.text)
                                    multiline: False
                                Label:
                                    text: "Unit:"
                                Spinner:
                                    id: unit
                                    values: ['cm','px']
                                    text: 'cm'
                                Label:
                                    text: "Keep Ratio:"
                                CheckBox:
                                    ratio: 1
                                    active: True
                                    id: keep_ratio
                                    on_active: CARD.keep_ratio = self.active
                                Label:
                                    text: "Force Format:"
                                CheckBox:
                                    ratio: 1
                                    #:import FFF conf.FORCE_FIT_FORMAT
                                    active: FFF
                                    id: force_format
                                    #:import SFFF conf.set_force_fit_format
                                    on_active: SFFF(args[1])
                        AccordionItem:
                            title: 'Templates'
                            GridLayout:
                                cols:1
                                Button:
                                    text: 'Templates Library'
                                    on_press: root.load_template_lib()
                                    size_hint_y: None
                                Button:
                                    text: 'Re Load Templates Library'
                                    on_press: root.load_template_lib(force_reload = True)
                                    size_hint_y: None
                        AccordionItem:
                            title: "Scripts"
                            ScrollView:
                                ScriptTree:
                                    root_options: {'text': 'Script Library'}
                                    size_hint_y: None
                                    on_minimum_height: self.height = self.minimum_height
            #FoldedTabbedPanelItem:
            TabbedPanelHeader:
                panel: explorer
                content: tab1_content.__self__
                FontIcon:
                    pos: self.parent.pos
                    size: self.parent.size
                    color: (1,1,1,1) if self.parent.state != 'normal' else (1,1,1,.2)
                    font_size: 30
                    icon: "book"
            TabbedPanelHeader:
                content: tab2_content.__self__
                FontIcon:
                    pos: self.parent.pos
                    size: self.parent.size
                    color: (1,1,1,1) if self.parent.state != 'normal' else (1,1,1,.2)
                    font_size: 30
                    icon: "settings"
    BoxLayout:
        orientation: 'vertical'
        Splitter:
            size_hint_y: None
            height: 250
            sizable_from: 'bottom'
            ScrollView:
                id: pg_scroll
                do_scroll_y: False
                canvas.before:
                    Color:
                        rgb: LIGHTGREY
                    Rectangle:
                        size: self.size
                        pos: self.pos
                PictureGrid:
                    id: pictures
        ScrollView:
            #size_hint_y: .3
            do_scroll_x: False
            canvas.before:
                Color:
                    rgb: LIGHTGREY
                Rectangle:
                    size: self.size
                    pos: self.pos
            GridLayout:
                cols: 1
                size_hint: 1, None
                on_minimum_height: self.height= self.minimum_height
                id: stack
                padding: 10
                on_children: root.compute_stats(self)
                last_selected: None
        #Progressbar when loading or printing
        BoxLayout:
            size_hint_y: None
            height: 30
            ProgressBar:
                id: load_progress
            Button:
                id: stop_action
                size_hint_x: None
                width: 0
                on_press: root.cancel_action = True
        Label:
            id: stats
            size_hint_y: None
            height: 30
            font_size: 20
            text_size: self.size
            valign: 'middle'
            halign: 'center'
